# Mini C EBNF Grammar <@BlankHeart---2024>

# Translation Unit
<Translation_Unit> ::= {<Function_Definition> | <GlobalVariable_Definition>} CODE_EOF

# Definition
<Function_Definition> ::= (VOID|INT) IDENTIFIER "(" [<Parameter>{","<Parameter>}] ")" <Compound_Statement>
<Parameter> ::= INT IDENTIFIER
<GlobalVariable_Definition> ::= INT IDENTIFIER ["="["-"]CONSTANT_INT]";"
<LocalVariable_Definition> ::= INT IDENTIFIER ["="<Expression>]";"

# Statement
<Statement> ::= <LocalVariable_Definition> | <Compound_Statement> | <Assign_Statement> | <If_Statement>
                <While_Statement> | <Return_Statement> | <Printf_Statement> | <Expression_Statement>
<Compound_Statement> ::= "{"{<Statement>}"}"

<Assign_Statement> ::= IDENTIFIER "=" <Expression> ";"
<If_Statement> ::= IF "("<Expression>")"<Statement>[ELSE<Statement>]
<While_Statement> ::= WHILE "("<Expression>")"<Statement>
<Return_Statement> ::= RETURN [<Expression>] ";"
<Printf_Statement> ::= PRINTF "(" CONSTANT_STR {","<Expression>} ")" ";"
<Expression_Statement> ::= <Expression> ";"

# Expression
<Expression> ::= <LogicOr_Expression>

<LogicOr_Expression> ::= <LogicAnd_Expression>{"||"<LogicAnd_Expression>}
<LogicAnd_Expression> ::= <Equality_Expression>{"&&"<Equality_Expression>}
<Equality_Expression> ::= <Relational_Expression>{("==" | "!=")<Relational_Expression>}
<Relational_Expression> ::= <PlusMinus_Expression>{("<" | "<=" | ">" | ">=")<PlusMinus_Expression>}
<PlusMinus_Expression> ::= <MulDiv_Expression>{("+" | "-")<MulDiv_Expression>}
<MulDiv_Expression> ::= <Unary_Expression>{("*" | "/" | "%")<Unary_Expression>}
<Unary_Expression> ::= ["-"|"!"] (<Primary_Expression> | <FunctionCall_Expression>)
<Primary_Expression> ::= "("<Expression>")" | IDENTIFIER | CONSTANT_INT
<FunctionCall_Expression>::= IDENTIFIER "(" [<Expression>{","<Expression>}] ")"                      
